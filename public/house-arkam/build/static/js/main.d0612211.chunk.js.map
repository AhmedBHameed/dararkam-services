{"version":3,"sources":["styles/theme.ts","util/time.ts","components/Table/Table.tsx","config/environment.ts","util/axios.ts","api/allPrayersQueryHook.ts","api/fridayInformationQueryHook.ts","pages/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","main","green","secondary","error","red","A400","background","default","momentLib","require","moment","date","undefined","format","StyledTableCell","withStyles","createStyles","head","backgroundColor","color","common","white","body","fontSize","paddingTop","spacing","paddingBottom","TableCell","StyledTableRow","root","action","hover","TableRow","useStyles","makeStyles","table","minWidth","padded","padding","TableData","prayers","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","align","TableBody","map","prayer","index","key","toString","name","first","last","phone","reservePrayingTime","updatedAt","isProd","process","baseUrl","httpClient","axios","create","baseURL","environment","headers","Accept","interceptors","response","use","res","data","useAllPrayersQuery","useState","setError","setData","loading","setLoading","useEffect","a","get","result","fetch","useFridayInformationQuery","spaceTop","marginTop","dateColor","fontWeight","Home","allPrayers","nextFridayDate","settings","nextFridayData","Container","maxWidth","Grid","container","direction","justify","alignItems","Box","Typography","variant","gutterBottom","subtract","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d0612211.chunk.js","sourcesContent":["import {red, green} from '@material-ui/core/colors';\nimport {createMuiTheme} from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: green[800],\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import {Moment, RelativeTimeKey} from 'moment';\n\n// eslint-disable-next-line\nconst momentLib = require('moment');\n\nconst moment = (date: string | Date | undefined = undefined, format: RelativeTimeKey | undefined = undefined): Moment =>\n  momentLib(date, format);\n\nconst lastFridayDate = (date: string) => {\n  return moment(date).subtract(1, 'week').format('YYYY-MM-DD');\n};\n\nexport {moment, lastFridayDate};\n","import React from 'react';\nimport {withStyles, Theme, createStyles, makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport {PrayerModel} from '../../api/allPrayersQueryHook';\nimport {moment} from '../../util/time';\n\nconst StyledTableCell = withStyles((theme: Theme) =>\n  createStyles({\n    head: {\n      backgroundColor: theme.palette.primary.main,\n      color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n      paddingTop: theme.spacing(1),\n      paddingBottom: theme.spacing(1),\n    },\n  })\n)(TableCell);\n\nconst StyledTableRow = withStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n      },\n    },\n  })\n)(TableRow);\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  table: {\n    minWidth: 700,\n  },\n  padded: {\n    padding: theme.spacing(2),\n  },\n}));\n\ninterface TableDataProps {\n  prayers: PrayerModel[];\n}\n\nconst TableData: React.FC<TableDataProps> = ({prayers}) => {\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"customized table\">\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>First name</StyledTableCell>\n            <StyledTableCell>Last name</StyledTableCell>\n            <StyledTableCell align=\"right\">Phone number</StyledTableCell>\n            <StyledTableCell align=\"right\">Pray at</StyledTableCell>\n            <StyledTableCell align=\"right\">Registered at</StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {prayers.map((prayer, index) => (\n            <StyledTableRow key={index.toString()}>\n              {/* component=\"th\" scope=\"row\" */}\n              <StyledTableCell>{prayer.name.first}</StyledTableCell>\n              <StyledTableCell>{prayer.name.last}</StyledTableCell>\n              <StyledTableCell align=\"right\">{prayer.phone}</StyledTableCell>\n              <StyledTableCell align=\"right\">{prayer.reservePrayingTime}</StyledTableCell>\n              <StyledTableCell align=\"right\">{moment(prayer.updatedAt).format('YYYY-MM-DD (hh:mm a)')}</StyledTableCell>\n            </StyledTableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default TableData;\n","const isProd = process.env.NODE_ENV === 'production';\nexport default {\n  isProd,\n  baseUrl: isProd ? '' : process.env.REACT_APP_DOMAIN_DEV,\n};\n","import axios, {AxiosInstance, AxiosResponse, AxiosError} from 'axios';\nimport environment from '../config/environment';\n\nconst httpClient: AxiosInstance = axios.create({\n  baseURL: environment.baseUrl,\n  headers: {\n    common: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n  },\n});\n\n/**\n * Axios request interceptors on respond.\n */\nhttpClient.interceptors.response.use(\n  (res: AxiosResponse<any>) => res.data,\n  (error: AxiosError) => error\n);\n\nexport default httpClient;\n","import {useState, useEffect} from 'react';\nimport httpClient from '../util/axios';\n\nexport interface PrayerModel {\n  id: string;\n  name: {\n    first: string;\n    last: string;\n  };\n  phone: string;\n  reservePrayingTime: string;\n  token: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst useAllPrayersQuery = () => {\n  const [error, setError] = useState<string | null>(null);\n  const [data, setData] = useState<PrayerModel[] | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    async function fetch() {\n      setLoading(() => true);\n      try {\n        const result = await httpClient.get('/api/all-prayers');\n        setLoading(() => false);\n        setData(result.data);\n      } catch (error) {\n        setError(error);\n        setLoading(() => false);\n      }\n    }\n    fetch();\n  }, [setData, setLoading, setError]);\n\n  return {\n    loading,\n    error,\n    data,\n  };\n};\n\nexport default useAllPrayersQuery;\n","import {useState, useEffect} from 'react';\nimport httpClient from '../util/axios';\n\nexport interface FridayInformationModel {\n  settings: {\n    nextFridayData: string;\n    firstPraying: {\n      time: string;\n      personSpaceLeft: number;\n    };\n    secondPraying: {\n      time: string;\n      personSpaceLeft: number;\n    };\n  };\n  prayer: {\n    token: string;\n    name: {\n      first: string;\n      last: string;\n    };\n    phoneNumber: string;\n  };\n}\n\nconst useFridayInformationQuery = () => {\n  const [error, setError] = useState<string | null>(null);\n  const [data, setData] = useState<FridayInformationModel | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    async function fetch() {\n      setLoading(() => true);\n      try {\n        const result = await httpClient.get('/api/friday-praying');\n        setLoading(() => false);\n        setData(result.data);\n      } catch (error) {\n        setError(error);\n        setLoading(() => false);\n      }\n    }\n    fetch();\n  }, [setData, setLoading, setError]);\n\n  return {\n    loading,\n    error,\n    data,\n  };\n};\n\nexport default useFridayInformationQuery;\n","import React from 'react';\nimport TableData from '../components/Table/Table';\nimport Container from '@material-ui/core/Container';\nimport useAllPrayersQuery from '../api/allPrayersQueryHook';\nimport useFridayInformationQuery from '../api/fridayInformationQueryHook';\nimport {lastFridayDate} from '../util/time';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {Theme, Typography, Grid, Box} from '@material-ui/core';\nimport {red} from '@material-ui/core/colors';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  spaceTop: {\n    marginTop: theme.spacing(5),\n  },\n  dateColor: {\n    color: red[400],\n    fontWeight: 'bold',\n  },\n}));\n\nconst Home: React.FC = () => {\n  const classes = useStyles();\n\n  const allPrayers = useAllPrayersQuery();\n  const fridayInformation = useFridayInformationQuery();\n\n  const nextFridayDate = fridayInformation.data?.settings.nextFridayData;\n  const {data} = allPrayers;\n\n  return (\n    <Container maxWidth=\"md\" className={classes.spaceTop}>\n      {nextFridayDate && (\n        <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\n          <Box>\n            <Typography variant=\"h5\" gutterBottom>\n              House Al-Arkam\n            </Typography>\n          </Box>\n          <Box>\n            <Typography variant=\"subtitle2\" gutterBottom>\n              From: <span className={classes.dateColor}>{lastFridayDate(nextFridayDate)}</span> ~> To:{' '}\n              <span className={classes.dateColor}>{nextFridayDate}</span>\n            </Typography>\n          </Box>\n        </Grid>\n      )}\n      {data && <TableData prayers={data} />}\n    </Container>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport 'normalize.css';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport theme from './styles/theme';\n// import logo from './logo.svg';\nimport './App.scss';\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Home />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}